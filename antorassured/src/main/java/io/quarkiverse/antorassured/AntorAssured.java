package io.quarkiverse.antorassured;

import java.io.IOException;
import java.net.URI;
import java.net.URISyntaxException;
import java.nio.file.FileSystem;
import java.nio.file.FileSystems;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.util.ArrayList;
import java.util.Map;
import java.util.Set;
import java.util.TreeMap;
import java.util.TreeSet;
import java.util.stream.Stream;

import org.jboss.logging.Logger;
import org.jsoup.Jsoup;
import org.jsoup.nodes.Document;
import org.jsoup.nodes.Element;

import io.quarkiverse.antora.WebBundlerResourceHandler;

/**
 * A utility for testing the generated Antora sites.
 *
 * @since 1.0.0
 */
public class AntorAssured {

    static final Logger log = Logger.getLogger(AntorAssured.class);

    private AntorAssured() {
    }

    /**
     * @return a {@link java.io.Closeable} {@link Stream} of HTML files generated by Antora
     *
     * @since 1.0.0
     */
    public static Stream<Path> htmlResources() {
        String basePath = WebBundlerResourceHandler.META_INF_ANTORA;
        try {
            URI uri = Thread.currentThread().getContextClassLoader().getResource(basePath).toURI();
            if ("jar".equals(uri.getScheme())) {
                try (FileSystem fileSystem = FileSystems.newFileSystem(uri, java.util.Collections.emptyMap())) {
                    Path pathInJar = fileSystem.getPath(basePath);
                    return listHtmlFiles(pathInJar);
                } catch (IOException e) {
                    throw new RuntimeException("Could not create a file system at " + uri, e);
                }
            } else {
                return listHtmlFiles(Paths.get(uri));
            }
        } catch (URISyntaxException e) {
            throw new RuntimeException(e);
        }
    }

    /**
     * Returns a stream of links occurring on HTML pages returned by {@link #htmlResources()}.
     *
     * @return a {@link LinkStream}
     *
     * @since 1.0.0
     */
    public static LinkStream links() {
        return links(ResourceResolver.autodetect());
    }

    /**
     * Returns a stream of links occurring on HTML pages returned by {@link #htmlResources()}.
     *
     * @param resourceResolver the {@link ResourceResolver} to use for resolving relative links and source locations; see also
     *        {@link ResourceResolver#autodetect()}
     * @return a {@link LinkStream}
     *
     * @since 1.0.0
     */
    public static LinkStream links(ResourceResolver resourceResolver) {
        final Map<Link, Set<Path>> result = new TreeMap<>();
        try (Stream<Path> paths = AntorAssured.htmlResources()) {
            paths.forEach(p -> {
                try {
                    final Document doc = Jsoup.parse(p);
                    for (Element link : doc.select("a[href]")) {
                        final String linkHref = link.attr("href");
                        final Link resolved = resourceResolver.resolveUri(p, linkHref);
                        result.computeIfAbsent(resolved, k -> new TreeSet<Path>()).add(p);
                    }
                } catch (IOException e) {
                    throw new RuntimeException("Could not parse " + p, e);
                }
            });
        }
        final Stream<Link> links = result.entrySet()
                .parallelStream()
                .map(en -> en.getKey().withOccurrences(en.getValue()));
        return new LinkStream(links, resourceResolver, 1, new ArrayList<>(), 30_000L);
    }

    private static Stream<Path> listHtmlFiles(Path path) {
        try {
            return Files.walk(path)
                    .filter(Files::isRegularFile)
                    .filter(p -> p.getFileName().toString().endsWith(".html"));
        } catch (IOException e) {
            throw new RuntimeException("Could not walk " + path, e);
        }
    }

}
